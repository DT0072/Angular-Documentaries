0
00:00:02,240 --> 00:00:04,969
Your application architecture depends on

1
00:00:04,969 --> 00:00:07,849
many factors, including the size and scope

2
00:00:07,849 --> 00:00:10,130
of the application you are working on,

3
00:00:10,130 --> 00:00:13,119
your team's size and experience, and your

4
00:00:13,119 --> 00:00:15,919
project's goals. But here are some

5
00:00:15,919 --> 00:00:18,179
suggestions based on what we covered in

6
00:00:18,179 --> 00:00:21,120
this course module. Every application must

7
00:00:21,120 --> 00:00:24,120
always have a root application module, by

8
00:00:24,120 --> 00:00:27,059
convention called AppModule. This is

9
00:00:27,059 --> 00:00:29,199
normally the module that bootstraps the

10
00:00:29,199 --> 00:00:31,830
root application component, AppComponent.

11
00:00:31,830 --> 00:00:34,659
For smaller applications, this could be

12
00:00:34,659 --> 00:00:36,549
the only Angular module for the

13
00:00:36,549 --> 00:00:38,969
application, as was the case with our

14
00:00:38,969 --> 00:00:41,429
sample application prior to this course

15
00:00:41,429 --> 00:00:44,500
module. As the application gets more

16
00:00:44,500 --> 00:00:46,869
features, consider defining a separate

17
00:00:46,869 --> 00:00:49,960
Angular module for each feature set. For

18
00:00:49,960 --> 00:00:52,350
example, a product module, a customer

19
00:00:52,350 --> 00:00:55,409
module in an invoice module. This keeps

20
00:00:55,409 --> 00:00:57,390
the code organized, separates the

21
00:00:57,390 --> 00:01:00,000
concerns, and prevents the AppModule from

22
00:01:00,000 --> 00:01:03,130
getting excessively large and unwieldy. As

23
00:01:03,130 --> 00:01:05,540
you add feature modules, you might find

24
00:01:05,540 --> 00:01:07,640
components, pipes, and directives that you

25
00:01:07,640 --> 00:01:10,629
want to share across feature modules.

26
00:01:10,629 --> 00:01:13,010
Define one or more shared modules for

27
00:01:13,010 --> 00:01:15,930
these shared pieces. Shared modules

28
00:01:15,930 --> 00:01:19,019
primarily used the exports and

29
00:01:19,019 --> 00:01:20,700
declarations arrays, with most of the

30
00:01:20,700 --> 00:01:24,370
declared pieces exported as well. And as

31
00:01:24,370 --> 00:01:26,930
we discussed in the last clip, we can also

32
00:01:26,930 --> 00:01:29,700
refactor our routes into their own routing

33
00:01:29,700 --> 00:01:33,840
modules. When creating an Angular module,

34
00:01:33,840 --> 00:01:36,180
we build a class and decorate it with the

35
00:01:36,180 --> 00:01:39,409
ng module decorator. The ng module

36
00:01:39,409 --> 00:01:42,829
metadata includes the bootstrap array for

37
00:01:42,829 --> 00:01:45,420
defining the list of startup components.

38
00:01:45,420 --> 00:01:48,260
In many cases, there is only one, the root

39
00:01:48,260 --> 00:01:50,730
component of the application. The

40
00:01:50,730 --> 00:01:52,760
declarations array declares which

41
00:01:52,760 --> 00:01:55,000
components, directives, and pipes belong

42
00:01:55,000 --> 00:01:57,819
to this module. The exports array

43
00:01:57,819 --> 00:01:59,650
identifies the list of components,

44
00:01:59,650 --> 00:02:02,112
directives, and pipes that an importing

45
00:02:02,112 --> 00:02:05,563
module can use The imports array lists

46
00:02:05,563 --> 00:02:08,453
supporting modules. These modules provide

47
00:02:08,453 --> 00:02:10,443
components, directives, and pipes needed

48
00:02:10,443 --> 00:02:13,362
by the components in this module. The

49
00:02:13,362 --> 00:02:15,733
providers array lists the service

50
00:02:15,733 --> 00:02:19,362
providers. Angular registers each provider

51
00:02:19,362 --> 00:02:22,233
with Angular's root application injector,

52
00:02:22,233 --> 00:02:24,462
so these services are available to be

53
00:02:24,462 --> 00:02:26,513
injected into any class in the

54
00:02:26,513 --> 00:02:29,772
application. This course module was all

55
00:02:29,772 --> 00:02:32,812
about Angular modules. We took a second

56
00:02:32,812 --> 00:02:34,812
look at the definition and purpose of an

57
00:02:34,812 --> 00:02:37,902
Angular module. We then focused in on the

58
00:02:37,902 --> 00:02:40,393
Angular module metadata and covered the

59
00:02:40,393 --> 00:02:43,443
truths to keep in mind when using that

60
00:02:43,443 --> 00:02:45,242
metadata. We leveraged that knowledge to

61
00:02:45,242 --> 00:02:47,062
create a feature module for our

62
00:02:47,062 --> 00:02:50,092
application and took it one step further,

63
00:02:50,092 --> 00:02:52,223
defining a shared module to reduce

64
00:02:52,223 --> 00:02:55,643
duplication in our application. Lastly, we

65
00:02:55,643 --> 00:02:57,902
reexamined our application root Angular

66
00:02:57,902 --> 00:03:00,492
module and saw how it orchestrates the

67
00:03:00,492 --> 00:03:03,883
application as a whole. If you are

68
00:03:03,883 --> 00:03:06,143
building a small application, such as the

69
00:03:06,143 --> 00:03:08,173
sample application we've created in this

70
00:03:08,173 --> 00:03:10,693
course, you may only need the one root

71
00:03:10,693 --> 00:03:14,133
application module, as shown here. But as

72
00:03:14,133 --> 00:03:16,252
your application grows, you'll want to

73
00:03:16,252 --> 00:03:19,233
refactor into feature modules and shared

74
00:03:19,233 --> 00:03:23,002
modules like this. Here we organized our

75
00:03:23,002 --> 00:03:26,122
application into multiple modules. We have

76
00:03:26,122 --> 00:03:28,763
our feature module, ProductModule, that

77
00:03:28,763 --> 00:03:31,492
encapsulates all of the product features.

78
00:03:31,492 --> 00:03:33,552
There will be more feature modules as our

79
00:03:33,552 --> 00:03:36,182
application grows. We have our

80
00:03:36,182 --> 00:03:38,622
SharedModule that shares commonly used

81
00:03:38,622 --> 00:03:40,983
components, directives, and pipes with any

82
00:03:40,983 --> 00:03:43,893
module that imports it. Currently, we

83
00:03:43,893 --> 00:03:46,782
import it into the ProductModule. As we

84
00:03:46,782 --> 00:03:48,932
build more feature modules, we'll import

85
00:03:48,932 --> 00:03:51,723
it into them as well. And we have our

86
00:03:51,723 --> 00:03:53,603
AppModule that orchestrates the

87
00:03:53,603 --> 00:03:56,793
application. Each feature module is added

88
00:03:56,793 --> 00:03:59,673
to the AppModule's imports array to extend

89
00:03:59,673 --> 00:04:03,685
the application with those features. Oh,

90
00:04:03,685 --> 00:04:06,194
it's been quite a journey. Now let's

91
00:04:06,194 --> 00:04:14,000
circle back to the beginning and spend a little more time with the Angular CLI.

