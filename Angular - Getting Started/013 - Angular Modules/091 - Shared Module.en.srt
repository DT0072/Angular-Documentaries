0
00:00:02,240 --> 00:00:04,360
The purpose of a SharedModule is to

1
00:00:04,360 --> 00:00:06,919
organize a set of commonly used pieces

2
00:00:06,919 --> 00:00:10,380
into one module and export those pieces so

3
00:00:10,380 --> 00:00:12,560
they are available to any module that

4
00:00:12,560 --> 00:00:15,519
imports the SharedModule. This allows us

5
00:00:15,519 --> 00:00:17,839
to selectively aggregate our reusable

6
00:00:17,839 --> 00:00:21,300
components and any external modules and

7
00:00:21,300 --> 00:00:23,640
reexport them in a consolidated

8
00:00:23,640 --> 00:00:25,839
convenience module. Creating a

9
00:00:25,839 --> 00:00:28,000
SharedModule involves defining a new

10
00:00:28,000 --> 00:00:31,289
module file, SharedModule in this example,

11
00:00:31,289 --> 00:00:33,399
and reorganizing the pieces of the

12
00:00:33,399 --> 00:00:36,119
application so that the shared pieces are

13
00:00:36,119 --> 00:00:38,880
here in this module. First, we add the

14
00:00:38,880 --> 00:00:40,899
components, directives, and pipes that we

15
00:00:40,899 --> 00:00:43,060
want to share throughout our application

16
00:00:43,060 --> 00:00:45,359
to the declarations array. In this

17
00:00:45,359 --> 00:00:47,399
example, we only want to add the

18
00:00:47,399 --> 00:00:50,280
StarComponent. Then we add to the Imports

19
00:00:50,280 --> 00:00:52,880
array anything that the shared component

20
00:00:52,880 --> 00:00:55,899
needs. In this example, we import the

21
00:00:55,899 --> 00:00:58,630
CommonModule because our StarComponent may

22
00:00:58,630 --> 00:01:01,770
need it. We don't import FormsModule

23
00:01:01,770 --> 00:01:04,200
because we don't need it here. If our

24
00:01:04,200 --> 00:01:06,870
StarComponent did use two‑way binding or

25
00:01:06,870 --> 00:01:09,349
we added another component here that did,

26
00:01:09,349 --> 00:01:12,840
we'd need to import FormsModule as well.

27
00:01:12,840 --> 00:01:15,519
We then need to export everything that we

28
00:01:15,519 --> 00:01:18,609
want to share. The exports array defines

29
00:01:18,609 --> 00:01:21,109
what this Angular module shares with any

30
00:01:21,109 --> 00:01:24,290
module that imports it. We export the

31
00:01:24,290 --> 00:01:27,129
StarComponent. That way, it is available

32
00:01:27,129 --> 00:01:29,299
to the components in any module that

33
00:01:29,299 --> 00:01:32,810
imports the SharedModule. We reexport the

34
00:01:32,810 --> 00:01:35,739
CommonModule and FormsModule so their

35
00:01:35,739 --> 00:01:37,459
directives and other features are

36
00:01:37,459 --> 00:01:40,019
available to any module that imports the

37
00:01:40,019 --> 00:01:42,629
SharedModule. And notice here that we can

38
00:01:42,629 --> 00:01:44,989
export something without importing it

39
00:01:44,989 --> 00:01:48,800
first. To use the SharedModule, we import

40
00:01:48,800 --> 00:01:51,420
it into every feature module that needs

41
00:01:51,420 --> 00:01:54,019
the shared capabilities such as our

42
00:01:54,019 --> 00:01:59,060
ProductModule. Let's give this a try. We

43
00:01:59,060 --> 00:02:01,703
want to build a SharedModule and will

44
00:02:01,703 --> 00:02:04,602
again use the CLI. Do you recall the

45
00:02:04,602 --> 00:02:07,492
correct CLI command to generate a module?

46
00:02:07,492 --> 00:02:10,923
We type ng for the Angular CLI, g for

47
00:02:10,923 --> 00:02:13,393
generate, m for module, and the name of

48
00:02:13,393 --> 00:02:15,893
our module since we are creating the

49
00:02:15,893 --> 00:02:18,513
shared module we wanted in the shared

50
00:02:18,513 --> 00:02:23,073
folder, so shared/shared. We already have

51
00:02:23,073 --> 00:02:25,173
the shared folder in place, so we'll

52
00:02:25,173 --> 00:02:28,820
specify the ‑‑flat option. That way, the

53
00:02:28,820 --> 00:02:31,492
CLI won't create another folder. And we

54
00:02:31,492 --> 00:02:33,592
want to import this module into the

55
00:02:33,592 --> 00:02:36,043
ProductModule to pull in its

56
00:02:36,043 --> 00:02:39,693
functionality. So we use the ‑m flag,

57
00:02:39,693 --> 00:02:43,592
specifying the module path and name, press

58
00:02:43,592 --> 00:02:47,152
Enter, and we see that the CLI creates the

59
00:02:47,152 --> 00:02:50,043
SharedModule, and it updates our

60
00:02:50,043 --> 00:02:53,923
ProductModule. We can see that here. It

61
00:02:53,923 --> 00:02:57,182
added SharedModule to our imports array.

62
00:02:57,182 --> 00:03:00,567
Let's open the new SharedModule. The CLI

63
00:03:00,567 --> 00:03:02,423
already created the class with the

64
00:03:02,423 --> 00:03:05,823
NgModule decorator and the required import

65
00:03:05,823 --> 00:03:09,002
statements, and it included CommonModule

66
00:03:09,002 --> 00:03:12,163
in the imports array here. Now, what did

67
00:03:12,163 --> 00:03:14,733
we want to share? Well, we want to share

68
00:03:14,733 --> 00:03:17,312
the StarComponent, so we add that to the

69
00:03:17,312 --> 00:03:19,902
declarations array here. To share the

70
00:03:19,902 --> 00:03:22,862
StarComponent, we need to export it. Let's

71
00:03:22,862 --> 00:03:25,612
add an exports array and export the

72
00:03:25,612 --> 00:03:28,633
StarComponent. There's a few more things

73
00:03:28,633 --> 00:03:31,353
that we want to share. So we don't have to

74
00:03:31,353 --> 00:03:33,923
import them into every feature module,

75
00:03:33,923 --> 00:03:37,092
we'll add CommonModule and FormsModule to

76
00:03:37,092 --> 00:03:39,832
the exports array. If there were other

77
00:03:39,832 --> 00:03:42,223
modules we wanted to share such as

78
00:03:42,223 --> 00:03:45,733
ReactiveFormsModule or Material Design, we

79
00:03:45,733 --> 00:03:48,723
could add them here as well. We could also

80
00:03:48,723 --> 00:03:51,612
share the ConvertToSpacesPipe. I'll leave

81
00:03:51,612 --> 00:03:54,582
that up to you to add here if you wish.

82
00:03:54,582 --> 00:03:57,212
Now we can remove the StarComponent,

83
00:03:57,212 --> 00:03:59,862
CommonModule, and FormsModule from the

84
00:03:59,862 --> 00:04:02,843
ProductModule along with their associated

85
00:04:02,843 --> 00:04:05,514
import statements since these are now

86
00:04:05,514 --> 00:04:09,174
already accessible from the imported

87
00:04:09,174 --> 00:04:12,463
SharedModule. Are we good to go? Yep, our

88
00:04:12,463 --> 00:04:15,764
application comes up as it did before.

89
00:04:15,764 --> 00:04:18,603
Looking back at our code, notice now that

90
00:04:18,603 --> 00:04:21,524
our feature module, ProductModule, only

91
00:04:21,524 --> 00:04:23,824
contains product pieces and the

92
00:04:23,824 --> 00:04:27,274
SharedModule, and the SharedModule is

93
00:04:27,274 --> 00:04:30,374
clean only including the pieces we want to

94
00:04:30,374 --> 00:04:32,903
share. We can reuse the SharedModule and

95
00:04:32,903 --> 00:04:40,000
any future feature modules as we add functionality to our application.

