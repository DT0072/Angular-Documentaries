0
00:00:02,540 --> 00:00:04,960
Before we jump into building a service,

1
00:00:04,960 --> 00:00:07,169
let's take a look at how services and

2
00:00:07,169 --> 00:00:10,169
dependency injection work in Angular. In

3
00:00:10,169 --> 00:00:12,890
this diagram our service is here, and our

4
00:00:12,890 --> 00:00:15,880
component that needs the service is here.

5
00:00:15,880 --> 00:00:18,190
There are two ways our component can work

6
00:00:18,190 --> 00:00:20,640
with this service. The component can

7
00:00:20,640 --> 00:00:22,839
create an instance of the service class

8
00:00:22,839 --> 00:00:26,510
and use it. That simple, and it works. But

9
00:00:26,510 --> 00:00:29,519
the instance is local to the component, so

10
00:00:29,519 --> 00:00:32,619
we can't share data or other resources,

11
00:00:32,619 --> 00:00:34,450
and it will be more difficult to mock the

12
00:00:34,450 --> 00:00:38,679
service for testing. Alternatively, we can

13
00:00:38,679 --> 00:00:41,770
register the service with Angular. Angular

14
00:00:41,770 --> 00:00:43,840
then creates a single instance of the

15
00:00:43,840 --> 00:00:46,920
service class, called a singleton, and

16
00:00:46,920 --> 00:00:49,920
holds onto it. Specifically, Angular

17
00:00:49,920 --> 00:00:53,320
provides a builtâ€‘in injector. We register

18
00:00:53,320 --> 00:00:55,490
our services with the Angular injector,

19
00:00:55,490 --> 00:00:58,079
which maintains a container of created

20
00:00:58,079 --> 00:01:01,170
service instances. The injector creates

21
00:01:01,170 --> 00:01:03,420
and manages the single instance, or

22
00:01:03,420 --> 00:01:06,379
singleton, of each registered service as

23
00:01:06,379 --> 00:01:09,230
required. In this example, the Angular

24
00:01:09,230 --> 00:01:11,859
injector is managing instances of three

25
00:01:11,859 --> 00:01:15,560
different services: log, math, and my

26
00:01:15,560 --> 00:01:19,430
service, which is abbreviated svc. If our

27
00:01:19,430 --> 00:01:21,939
component needs a service, the component

28
00:01:21,939 --> 00:01:25,469
class defines the service as a dependency.

29
00:01:25,469 --> 00:01:28,090
The Angular injector then provides, or

30
00:01:28,090 --> 00:01:31,090
injects, the service class instance when

31
00:01:31,090 --> 00:01:34,459
the component class is instantiated. This

32
00:01:34,459 --> 00:01:38,239
process is called dependency injection.

33
00:01:38,239 --> 00:01:41,060
Since Angular manages the single instance,

34
00:01:41,060 --> 00:01:43,590
any data or logic in that instance is

35
00:01:43,590 --> 00:01:46,870
shared by all of the classes that use it.

36
00:01:46,870 --> 00:01:49,090
This technique is the recommended way to

37
00:01:49,090 --> 00:01:51,620
use services because it provides better

38
00:01:51,620 --> 00:01:54,530
management of service instances, it allows

39
00:01:54,530 --> 00:01:57,250
sharing of data and other resources, and

40
00:01:57,250 --> 00:01:59,189
it's easier to mock the services for

41
00:01:59,189 --> 00:02:02,000
testing purposes. Now let's look at a more

42
00:02:02,000 --> 00:02:05,739
formal definition of dependency injection.

43
00:02:05,739 --> 00:02:08,719
Dependency injection is a coding pattern

44
00:02:08,719 --> 00:02:11,370
in which a class receives the instances of

45
00:02:11,370 --> 00:02:14,500
objects it needs, called its dependencies,

46
00:02:14,500 --> 00:02:17,300
from an external source rather than

47
00:02:17,300 --> 00:02:20,360
creating them itself. In Angular, this

48
00:02:20,360 --> 00:02:23,840
external source is the Angular injector.

49
00:02:23,840 --> 00:02:25,939
Now that we've got a general idea of how

50
00:02:25,939 --> 00:02:32,000
services and dependency injection work in Angular, let's build a service.

