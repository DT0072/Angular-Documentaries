0
00:00:03,000 --> 00:00:05,650
We start with first things first. We'll

1
00:00:05,650 --> 00:00:07,950
discuss the tools we'll use, then walk

2
00:00:07,950 --> 00:00:10,320
through how to set up and run an Angular

3
00:00:10,320 --> 00:00:12,490
application. Next, we'll dive into

4
00:00:12,490 --> 00:00:14,739
components. We'll build the app component

5
00:00:14,739 --> 00:00:16,589
using a simple template and minimal

6
00:00:16,589 --> 00:00:19,460
component code and metadata. We'll see how

7
00:00:19,460 --> 00:00:20,989
to build the user interface for our

8
00:00:20,989 --> 00:00:22,510
application using templates,

9
00:00:22,510 --> 00:00:25,480
interpolation, and directives. We'll power

10
00:00:25,480 --> 00:00:27,750
up that user interface with data binding

11
00:00:27,750 --> 00:00:30,839
and nicely format our data with pipes.

12
00:00:30,839 --> 00:00:32,479
Next, we'll tackle some additional

13
00:00:32,479 --> 00:00:34,689
component techniques. We'll define

14
00:00:34,689 --> 00:00:36,869
interfaces, encapsulate styles, and

15
00:00:36,869 --> 00:00:39,170
leverage lifecycle hooks to build better

16
00:00:39,170 --> 00:00:41,670
components. We'll see how to build a

17
00:00:41,670 --> 00:00:43,700
component designed to be nested within

18
00:00:43,700 --> 00:00:46,030
other components and how to communicate

19
00:00:46,030 --> 00:00:47,689
between the nested component and its

20
00:00:47,689 --> 00:00:50,579
container. We often have logic or data

21
00:00:50,579 --> 00:00:52,990
that is needed across components. We'll

22
00:00:52,990 --> 00:00:54,969
learn how to build services specifically

23
00:00:54,969 --> 00:00:57,479
for this purpose and use dependency

24
00:00:57,479 --> 00:00:59,780
injection to inject those services into

25
00:00:59,780 --> 00:01:02,429
the components that need them. Most web

26
00:01:02,429 --> 00:01:04,260
applications need to communicate with a

27
00:01:04,260 --> 00:01:06,989
back‑end server to get or post data and to

28
00:01:06,989 --> 00:01:09,840
execute back‑end business logic. In this

29
00:01:09,840 --> 00:01:12,609
module, we'll leverage HTTP to retrieve

30
00:01:12,609 --> 00:01:15,620
the data for our application. Our sample

31
00:01:15,620 --> 00:01:18,290
application displays multiple views. We'll

32
00:01:18,290 --> 00:01:20,310
see how to set up routing to navigate

33
00:01:20,310 --> 00:01:23,409
between those views. Next is Angular

34
00:01:23,409 --> 00:01:26,439
modules. We learn about and use the root

35
00:01:26,439 --> 00:01:29,140
Angular module throughout this course. But

36
00:01:29,140 --> 00:01:31,109
as the application grows, we want to

37
00:01:31,109 --> 00:01:34,269
separate its concerns. This course module

38
00:01:34,269 --> 00:01:37,219
reviews the basics of Angular modules and

39
00:01:37,219 --> 00:01:39,689
refactors our application into logical

40
00:01:39,689 --> 00:01:43,239
blocks using multiple Angular modules.

41
00:01:43,239 --> 00:01:45,090
Through the majority of this course, we

42
00:01:45,090 --> 00:01:46,959
create our components and other code

43
00:01:46,959 --> 00:01:50,370
manually, but, spoiler alert, there is an

44
00:01:50,370 --> 00:01:52,819
easier way. We'll learn how to use the

45
00:01:52,819 --> 00:01:56,030
Angular CLI to build, test, and deploy our

46
00:01:56,030 --> 00:01:58,349
application. We're covering a lot of

47
00:01:58,349 --> 00:02:00,590
territory, and by the end of our journey,

48
00:02:00,590 --> 00:02:03,260
we'll have a simple, but fully operational

49
00:02:03,260 --> 00:02:05,769
Angular application. You can use that

50
00:02:05,769 --> 00:02:07,959
application as a reference for your own

51
00:02:07,959 --> 00:02:13,000
development. Let's start our journey through Angular.

