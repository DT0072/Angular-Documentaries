0
00:00:01,439 --> 00:00:03,680
When working with user entry HTML

1
00:00:03,680 --> 00:00:06,559
elements, such as an input element, we

2
00:00:06,559 --> 00:00:08,720
often want to display a component class

3
00:00:08,720 --> 00:00:11,550
property in the template and update that

4
00:00:11,550 --> 00:00:14,279
property when the user makes a change.

5
00:00:14,279 --> 00:00:18,570
This process requires two‑way binding. To

6
00:00:18,570 --> 00:00:20,989
specify two‑way binding in Angular, we use

7
00:00:20,989 --> 00:00:25,210
the ngModel directive. We enclose ngModel

8
00:00:25,210 --> 00:00:27,800
in square brackets to indicate property

9
00:00:27,800 --> 00:00:30,739
binding from the class property to the

10
00:00:30,739 --> 00:00:34,750
input element, and parentheses to indicate

11
00:00:34,750 --> 00:00:37,429
event binding to send a notification of

12
00:00:37,429 --> 00:00:40,460
the user‑entered data back to the class

13
00:00:40,460 --> 00:00:42,600
property. We assign this directive to a

14
00:00:42,600 --> 00:00:45,619
template expression. To help us remember

15
00:00:45,619 --> 00:00:47,770
which order to put the two sets of

16
00:00:47,770 --> 00:00:50,125
brackets, visualize a banana in a box.

17
00:00:50,125 --> 00:00:52,899
Square brackets for the box on the outside

18
00:00:52,899 --> 00:00:55,320
and parentheses for the banana on the

19
00:00:55,320 --> 00:00:58,289
inside. So now we have another Angular

20
00:00:58,289 --> 00:01:00,979
directive that we can use. Every time we

21
00:01:00,979 --> 00:01:03,340
want to use an Angular directive in a

22
00:01:03,340 --> 00:01:05,290
template, we need to consider how to make

23
00:01:05,290 --> 00:01:07,459
that directive visible to the component

24
00:01:07,459 --> 00:01:10,349
associated with that template. Recall that

25
00:01:10,349 --> 00:01:12,849
an Angular module defines the boundary or

26
00:01:12,849 --> 00:01:15,180
context within which the component

27
00:01:15,180 --> 00:01:18,239
resolves its directives and dependencies.

28
00:01:18,239 --> 00:01:20,150
The illustration of our AppModule

29
00:01:20,150 --> 00:01:23,090
currently looks like this. We want to use

30
00:01:23,090 --> 00:01:25,150
the ngModel directive in our

31
00:01:25,150 --> 00:01:27,980
ProductListComponent, which is owned by

32
00:01:27,980 --> 00:01:31,900
AppModule. So in the AppModule, we need to

33
00:01:31,900 --> 00:01:34,650
import the appropriate system module that

34
00:01:34,650 --> 00:01:39,040
exposes the ngModel directive. Since the

35
00:01:39,040 --> 00:01:42,299
ngModel directive is most often used when

36
00:01:42,299 --> 00:01:45,799
building data entry forms, ngModel is part

37
00:01:45,799 --> 00:01:50,004
of FormsModule, so we import that here.

38
00:01:50,004 --> 00:01:53,680
Now, the ngModel directive and any of the

39
00:01:53,680 --> 00:01:56,480
other Angular forms directives are visible

40
00:01:56,480 --> 00:01:59,900
to any component declared by AppModule,

41
00:01:59,900 --> 00:02:03,260
including our ProductListComponent. Now

42
00:02:03,260 --> 00:02:07,260
let's give this a try. We are back in the

43
00:02:07,260 --> 00:02:08,569
editor and looking at the

44
00:02:08,569 --> 00:02:11,169
ProductListComponent and its associated

45
00:02:11,169 --> 00:02:13,965
template. Recall that we defined a Filter

46
00:02:13,965 --> 00:02:16,960
by input box here and display the entered

47
00:02:16,960 --> 00:02:20,080
filter here. We'll later use the filter to

48
00:02:20,080 --> 00:02:22,930
filter our list of products. Let's start

49
00:02:22,930 --> 00:02:24,939
by adding a component class property for

50
00:02:24,939 --> 00:02:28,099
the listFilter. This property is a string,

51
00:02:28,099 --> 00:02:30,560
and we'll set a default initial value for

52
00:02:30,560 --> 00:02:33,310
filtering the list of products. We hard

53
00:02:33,310 --> 00:02:35,419
code the filter string here, but you can

54
00:02:35,419 --> 00:02:37,569
imagine that we store the user's last

55
00:02:37,569 --> 00:02:40,280
entered filter and use that as the default

56
00:02:40,280 --> 00:02:43,340
instead. With that, we can set up the

57
00:02:43,340 --> 00:02:46,930
two‑way binding. On the input element, we

58
00:02:46,930 --> 00:02:49,990
draw a banana in a box, then specify the

59
00:02:49,990 --> 00:02:52,699
ngModel directive. We bind to the

60
00:02:52,699 --> 00:02:55,870
component class listFilter property. We

61
00:02:55,870 --> 00:02:58,300
want to display the list filter here, so

62
00:02:58,300 --> 00:03:00,990
we use interpolation. Recall that

63
00:03:00,990 --> 00:03:04,939
interpolation has no quotes. Are we done?

64
00:03:04,939 --> 00:03:08,189
Not quite. Let's open the terminal window.

65
00:03:08,189 --> 00:03:11,449
We see an error, Can't bind to ngModel

66
00:03:11,449 --> 00:03:14,405
since it isn't a known property of input.

67
00:03:14,405 --> 00:03:17,150
This is telling us that Angular can't find

68
00:03:17,150 --> 00:03:20,699
the ngModel directive. Recall from the

69
00:03:20,699 --> 00:03:23,879
slides that the ngModel directive is part

70
00:03:23,879 --> 00:03:26,189
of the Angular module for forms called

71
00:03:26,189 --> 00:03:29,590
FormsModule. To expose this directive to

72
00:03:29,590 --> 00:03:32,000
our ProductListComponent, we need to

73
00:03:32,000 --> 00:03:35,039
import the FormsModule in the module that

74
00:03:35,039 --> 00:03:37,610
owns the ProductListComponent, which is

75
00:03:37,610 --> 00:03:40,669
our AppModule. We start by importing

76
00:03:40,669 --> 00:03:44,039
FormsModule from @angular/forms. We then

77
00:03:44,039 --> 00:03:47,020
add FormsModule to the imports array for

78
00:03:47,020 --> 00:03:50,439
the NgModule decorator. Why the imports

79
00:03:50,439 --> 00:03:53,430
array and not the declarations? Our

80
00:03:53,430 --> 00:03:55,430
directives, components, and pipes are

81
00:03:55,430 --> 00:03:58,485
declared here in the declarations array.

82
00:03:58,485 --> 00:04:00,919
Directives, components, and pipes we use

83
00:04:00,919 --> 00:04:03,740
from other sources, such as Angular itself

84
00:04:03,740 --> 00:04:06,530
or third parties, are defined in external

85
00:04:06,530 --> 00:04:09,120
Angular modules we add to the imports

86
00:04:09,120 --> 00:04:12,210
array here. Now that we've told Angular

87
00:04:12,210 --> 00:04:15,080
where to find the ngModel, let's see the

88
00:04:15,080 --> 00:04:18,149
result. When the page displays, we see

89
00:04:18,149 --> 00:04:21,329
cart as the default value. It is displayed

90
00:04:21,329 --> 00:04:25,139
here and here. If we modify the entry,

91
00:04:25,139 --> 00:04:27,240
notice that the displayed filter text is

92
00:04:27,240 --> 00:04:30,199
also updated. That's because we are using

93
00:04:30,199 --> 00:04:32,920
two‑way binding. Notice that the list of

94
00:04:32,920 --> 00:04:35,480
products is not yet filtered. We'll do

95
00:04:35,480 --> 00:04:38,430
that in the next module. There is one more

96
00:04:38,430 --> 00:04:41,250
thing we do want to address now, and that

97
00:04:41,250 --> 00:04:44,329
is the data formatting. That price should

98
00:04:44,329 --> 00:04:56,000
really look like a price and show the appropriate currency symbol.

