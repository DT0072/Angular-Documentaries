0
00:00:01,540 --> 00:00:04,719
Using the Angular CLI, we create a new

1
00:00:04,719 --> 00:00:08,449
Angular application using the new command.

2
00:00:08,449 --> 00:00:11,779
Let's try it out. Here in the terminal

3
00:00:11,779 --> 00:00:15,390
window, we'll type ng new and our new

4
00:00:15,390 --> 00:00:18,329
application name. Let's use a classic,

5
00:00:18,329 --> 00:00:22,269
hello‑world. The CLI has the ability to

6
00:00:22,269 --> 00:00:24,140
provide prompts to ask for more

7
00:00:24,140 --> 00:00:27,870
information. The CLI may add or change

8
00:00:27,870 --> 00:00:30,719
prompts, so your experience may vary from

9
00:00:30,719 --> 00:00:33,219
what you see here. In this specific

10
00:00:33,219 --> 00:00:35,630
example, it's asking whether we want to

11
00:00:35,630 --> 00:00:38,780
add Angular routing to the application. To

12
00:00:38,780 --> 00:00:41,119
keep things simple for our demo, let's

13
00:00:41,119 --> 00:00:44,439
answer No. Next, it asks which style sheet

14
00:00:44,439 --> 00:00:47,179
format we want. Use the arrow keys to

15
00:00:47,179 --> 00:00:50,030
select the desired format. We'll select

16
00:00:50,030 --> 00:00:53,570
CSS and press Enter to select. After we

17
00:00:53,570 --> 00:00:56,049
answer the last question, the CLI

18
00:00:56,049 --> 00:00:59,869
generates our application. Look at all the

19
00:00:59,869 --> 00:01:04,049
files that the CLI created. Now the CLI is

20
00:01:04,049 --> 00:01:06,500
automatically installing the packages

21
00:01:06,500 --> 00:01:09,849
defined in that package.json file. This

22
00:01:09,849 --> 00:01:12,939
takes a bit of time, so I'll jump ahead.

23
00:01:12,939 --> 00:01:15,680
When the CLI new command is finished, we

24
00:01:15,680 --> 00:01:19,379
see a success message. Yay! The CLI

25
00:01:19,379 --> 00:01:21,769
creates a folder with the same name as the

26
00:01:21,769 --> 00:01:24,810
application name. Let's navigate down to

27
00:01:24,810 --> 00:01:28,620
the created hello‑world folder. I'll then

28
00:01:28,620 --> 00:01:31,879
use the shortcut code . to open this

29
00:01:31,879 --> 00:01:34,840
folder in VS Code. Starting at the top,

30
00:01:34,840 --> 00:01:38,129
here is an e2e folder. This folder

31
00:01:38,129 --> 00:01:40,549
contains the start of an end‑to‑end test

32
00:01:40,549 --> 00:01:43,159
for the application. The node_modules

33
00:01:43,159 --> 00:01:45,299
folder contains all of the libraries that

34
00:01:45,299 --> 00:01:48,439
were just installed by the CLI as defined

35
00:01:48,439 --> 00:01:52,120
in the package.json file. The src folder

36
00:01:52,120 --> 00:01:53,659
contains the source code for our

37
00:01:53,659 --> 00:01:56,450
application. Below it is the app folder

38
00:01:56,450 --> 00:01:59,060
where we'll add all of the modules,

39
00:01:59,060 --> 00:02:01,640
components, services, and other files for

40
00:02:01,640 --> 00:02:04,709
our application. The assets folder is for

41
00:02:04,709 --> 00:02:07,060
any images or assets we want to include

42
00:02:07,060 --> 00:02:10,379
with the application. In our APM project,

43
00:02:10,379 --> 00:02:14,259
our welcome page logo is in this folder.

44
00:02:14,259 --> 00:02:16,469
The environments folder sets up our build

45
00:02:16,469 --> 00:02:19,370
environments. By default, it generates

46
00:02:19,370 --> 00:02:22,110
two, one for development and one for

47
00:02:22,110 --> 00:02:25,030
production. The CLI picks the appropriate

48
00:02:25,030 --> 00:02:27,180
environment file based on the flags we

49
00:02:27,180 --> 00:02:31,139
use. The CLI comes with a default favicon.

50
00:02:31,139 --> 00:02:33,449
Nice! Feel free to replace it with

51
00:02:33,449 --> 00:02:35,159
whatever is appropriate for your

52
00:02:35,159 --> 00:02:38,919
application. The index.html file is the

53
00:02:38,919 --> 00:02:41,479
first file downloaded when a user accesses

54
00:02:41,479 --> 00:02:44,580
our application. There isn't much here.

55
00:02:44,580 --> 00:02:46,490
You'd think that there would be at least a

56
00:02:46,490 --> 00:02:50,129
few script tags, but no. We'll see why a

57
00:02:50,129 --> 00:02:52,719
little later. In most cases, you won't

58
00:02:52,719 --> 00:02:56,400
need to ever modify this file. Main.ts is

59
00:02:56,400 --> 00:02:59,139
the file that bootstraps our application.

60
00:02:59,139 --> 00:03:01,080
This is another file you should never need

61
00:03:01,080 --> 00:03:04,259
to modify. The polyfills file aids in

62
00:03:04,259 --> 00:03:06,569
supporting both evergreen and classic

63
00:03:06,569 --> 00:03:09,409
browsers. Pollyfills add code to allow

64
00:03:09,409 --> 00:03:12,289
functionality written for modern browsers

65
00:03:12,289 --> 00:03:15,389
to work in older browsers. By default. It

66
00:03:15,389 --> 00:03:17,610
is set up to support evergreen browsers,

67
00:03:17,610 --> 00:03:20,409
as stated here. If you need to target

68
00:03:20,409 --> 00:03:23,020
older browsers, there are comments in this

69
00:03:23,020 --> 00:03:25,340
file defining which additional libraries

70
00:03:25,340 --> 00:03:27,969
you need. Simply remove the comment marks

71
00:03:27,969 --> 00:03:30,110
from the desired libraries to include

72
00:03:30,110 --> 00:03:32,439
them. Here is a style sheet for

73
00:03:32,439 --> 00:03:35,430
application‑wide styles. As its name

74
00:03:35,430 --> 00:03:38,469
suggests, the test file sets up for

75
00:03:38,469 --> 00:03:42,419
testing. That's it for the src folder. The

76
00:03:42,419 --> 00:03:45,340
browserlistrc file defines the list of

77
00:03:45,340 --> 00:03:47,990
browsers and browser versions that your

78
00:03:47,990 --> 00:03:50,900
application will support. It's used by the

79
00:03:50,900 --> 00:03:53,419
build system to build bundles appropriate

80
00:03:53,419 --> 00:03:55,729
for your supported browsers. The

81
00:03:55,729 --> 00:03:58,080
editorconfig file provides some standard

82
00:03:58,080 --> 00:04:00,699
settings for your editor. The gitignore

83
00:04:00,699 --> 00:04:02,689
tells Git which files to ignore for

84
00:04:02,689 --> 00:04:05,069
checking in to Git. Notice that our large

85
00:04:05,069 --> 00:04:07,259
node_modules folder is included in this

86
00:04:07,259 --> 00:04:10,659
list. Let's skip the CLI configuration

87
00:04:10,659 --> 00:04:12,770
file for a moment and quickly cover the

88
00:04:12,770 --> 00:04:15,080
remaining files here. The karma.config

89
00:04:15,080 --> 00:04:18,379
file sets up Karma, which is a JavaScript

90
00:04:18,379 --> 00:04:20,920
test runner. We'll use that for our unit

91
00:04:20,920 --> 00:04:24,009
tests. We walked through the package.json

92
00:04:24,009 --> 00:04:26,420
file in the First Things First module

93
00:04:26,420 --> 00:04:29,110
earlier in this course. Here's a basic

94
00:04:29,110 --> 00:04:31,870
README. The tsconfig files are for

95
00:04:31,870 --> 00:04:35,290
TypeScript configuration. Lastly, there is

96
00:04:35,290 --> 00:04:38,800
a tslint configuration file. Tslint is a

97
00:04:38,800 --> 00:04:41,189
TypeScript linter which checks our code

98
00:04:41,189 --> 00:04:43,750
against a set of code style rules and

99
00:04:43,750 --> 00:04:46,139
notifies us if any of the rules aren't

100
00:04:46,139 --> 00:04:49,579
followed. This file defines those rules.

101
00:04:49,579 --> 00:04:51,639
Feel free to change these settings based

102
00:04:51,639 --> 00:04:53,500
on your team's selected code style

103
00:04:53,500 --> 00:04:56,699
preferences. Now let's go back to the CLI

104
00:04:56,699 --> 00:04:59,569
configuration file. This file is used to

105
00:04:59,569 --> 00:05:02,519
configure how the CLI generates code and

106
00:05:02,519 --> 00:05:05,290
works with our files. I'm not going to go

107
00:05:05,290 --> 00:05:07,189
through every option here, but want to

108
00:05:07,189 --> 00:05:10,370
point out a few key settings. The assets

109
00:05:10,370 --> 00:05:12,500
array allows us to provide a list of

110
00:05:12,500 --> 00:05:14,850
folders or files that are included with

111
00:05:14,850 --> 00:05:17,350
our application. This defines our

112
00:05:17,350 --> 00:05:20,970
application's selector prefix. Recall that

113
00:05:20,970 --> 00:05:24,000
in the APM application we defined a prefix

114
00:05:24,000 --> 00:05:27,279
of pm. By default, the CLI creates a

115
00:05:27,279 --> 00:05:30,310
prefix of app. If you want to assign a

116
00:05:30,310 --> 00:05:33,199
unique prefix for your application, it is

117
00:05:33,199 --> 00:05:35,279
best to do that as part of the new

118
00:05:35,279 --> 00:05:41,319
command. Use ng new hello‑world ‑‑prefix

119
00:05:41,319 --> 00:05:44,970
hw for hello world or whatever prefix you

120
00:05:44,970 --> 00:05:48,180
prefer. Lastly, any global style sheets

121
00:05:48,180 --> 00:05:50,959
are defined in this styles array. You can

122
00:05:50,959 --> 00:05:53,589
list any number of style sheets as needed,

123
00:05:53,589 --> 00:05:56,199
but only include the global style sheets

124
00:05:56,199 --> 00:05:59,220
here. So that's an overview of the basic

125
00:05:59,220 --> 00:06:01,839
files created by the CLI new command.

126
00:06:01,839 --> 00:06:06,069
Before moving on, let's look at a few key

127
00:06:06,069 --> 00:06:09,399
new command flags. Since we have VS Code

128
00:06:09,399 --> 00:06:11,980
open, we can now use its integrated

129
00:06:11,980 --> 00:06:13,850
terminal. And I'll make it a little

130
00:06:13,850 --> 00:06:19,100
larger. Type ng new ‑‑help. Scrolling back

131
00:06:19,100 --> 00:06:21,160
to the top, we can see that it has many

132
00:06:21,160 --> 00:06:24,629
flags. The ‑‑skip‑install is nice if you

133
00:06:24,629 --> 00:06:27,139
want to generate some code without waiting

134
00:06:27,139 --> 00:06:29,750
for it to install the Node packages. You

135
00:06:29,750 --> 00:06:32,089
can install packages later using npm

136
00:06:32,089 --> 00:06:34,670
install. We've already discussed the

137
00:06:34,670 --> 00:06:37,579
‑‑prefix flag. Feel free to create

138
00:06:37,579 --> 00:06:39,500
additional applications using the new

139
00:06:39,500 --> 00:06:42,810
command with any of these flags. Just note

140
00:06:42,810 --> 00:06:45,149
that you cannot generate a new Angular

141
00:06:45,149 --> 00:06:48,139
application within the folder of an

142
00:06:48,139 --> 00:06:50,740
existing Angular application. And so be

143
00:06:50,740 --> 00:06:52,629
sure to navigate out of the hello‑world

144
00:06:52,629 --> 00:06:55,670
folder before using the new command. The

145
00:06:55,670 --> 00:06:57,509
next thing we want to do is run our

146
00:06:57,509 --> 00:07:07,000
application, so let's check out the serve command.

