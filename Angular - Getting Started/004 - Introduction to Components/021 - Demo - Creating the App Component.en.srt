0
00:00:01,540 --> 00:00:04,030
In this demo, we build our app component,

1
00:00:04,030 --> 00:00:05,830
which is the root component for our

2
00:00:05,830 --> 00:00:08,539
application. Here we are in the editor

3
00:00:08,539 --> 00:00:11,189
with the APM folder open. This is the

4
00:00:11,189 --> 00:00:13,400
folder we set up in the last module from

5
00:00:13,400 --> 00:00:16,019
the starter files I provided. Let's open

6
00:00:16,019 --> 00:00:18,969
the src folder, and under that, the app

7
00:00:18,969 --> 00:00:21,679
folder. Since I used the Angular CLI to

8
00:00:21,679 --> 00:00:24,289
create the starter files, it created the

9
00:00:24,289 --> 00:00:27,370
root app component. It named the file

10
00:00:27,370 --> 00:00:31,000
app.component.ts. The file naming

11
00:00:31,000 --> 00:00:32,679
convention that we'll follow throughout

12
00:00:32,679 --> 00:00:35,020
this course is to start with the feature

13
00:00:35,020 --> 00:00:37,359
name. This is our root application

14
00:00:37,359 --> 00:00:40,039
component, so by convention, it's called

15
00:00:40,039 --> 00:00:42,979
app, then a dot, then the type of ES

16
00:00:42,979 --> 00:00:45,869
module defined in this file, in this case,

17
00:00:45,869 --> 00:00:49,159
component, to identify this ES module as a

18
00:00:49,159 --> 00:00:52,140
component. Another dot and the extension.

19
00:00:52,140 --> 00:00:55,409
Since we are using TypeScript, we'll use

20
00:00:55,409 --> 00:00:59,939
ts as the extension. Let's open that file.

21
00:00:59,939 --> 00:01:02,799
In VS Code, I can click the Explorer icon

22
00:01:02,799 --> 00:01:05,099
to close the Explorer and see more of the

23
00:01:05,099 --> 00:01:07,650
code. I can reopen the Explorer by

24
00:01:07,650 --> 00:01:10,189
clicking the icon again. Now I'll delete

25
00:01:10,189 --> 00:01:12,409
the starter code for this file so we can

26
00:01:12,409 --> 00:01:15,000
build the app component from scratch. I

27
00:01:15,000 --> 00:01:16,469
like to start coding by building the

28
00:01:16,469 --> 00:01:18,879
class, but the order of these steps really

29
00:01:18,879 --> 00:01:21,390
don't matter. When we build a class, we

30
00:01:21,390 --> 00:01:24,189
first type in the export keyword to ensure

31
00:01:24,189 --> 00:01:26,189
that other parts of the application can

32
00:01:26,189 --> 00:01:29,049
use this class. Next, we type in the class

33
00:01:29,049 --> 00:01:31,939
keyword, then the name of the class. Since

34
00:01:31,939 --> 00:01:34,189
this is our application component class,

35
00:01:34,189 --> 00:01:36,120
we'll follow conventions and name it

36
00:01:36,120 --> 00:01:38,989
AppComponent. Inside this class, we'll

37
00:01:38,989 --> 00:01:42,439
define one property, the pageTitle. We

38
00:01:42,439 --> 00:01:45,060
type the property name followed by a colon

39
00:01:45,060 --> 00:01:48,010
and the property data type, which for the

40
00:01:48,010 --> 00:01:50,540
pageTitle is a string. Notice how

41
00:01:50,540 --> 00:01:52,939
IntelliSense helps us here. For this

42
00:01:52,939 --> 00:01:55,150
property, we want to define a default

43
00:01:55,150 --> 00:01:58,689
value for the pageTitle. Next, we define

44
00:01:58,689 --> 00:02:01,840
the Component decorator above the class.

45
00:02:01,840 --> 00:02:04,200
The Component decorator always begins with

46
00:02:04,200 --> 00:02:06,250
an at sign, then the name of the

47
00:02:06,250 --> 00:02:08,860
decorator, and we're using the Component

48
00:02:08,860 --> 00:02:11,460
decorator. The Component decorator is a

49
00:02:11,460 --> 00:02:14,520
function, so we type parentheses. And

50
00:02:14,520 --> 00:02:16,860
we're going to pass in an object, so we

51
00:02:16,860 --> 00:02:19,960
type in curly braces. Notice how

52
00:02:19,960 --> 00:02:21,900
TypeScript has underlined the Component

53
00:02:21,900 --> 00:02:24,819
decorator and flagged it as an error. The

54
00:02:24,819 --> 00:02:28,379
error is, Can't find name 'Component'. Any

55
00:02:28,379 --> 00:02:30,819
guesses on what the problem is? If you

56
00:02:30,819 --> 00:02:32,530
said that we are missing the import

57
00:02:32,530 --> 00:02:35,460
statement, you are right. We need to

58
00:02:35,460 --> 00:02:39,830
import the Component decorator from

59
00:02:39,830 --> 00:02:43,090
Angular/core. Now the error underline goes

60
00:02:43,090 --> 00:02:46,439
away, and we can complete the metadata. In

61
00:02:46,439 --> 00:02:48,520
the Component metadata, we specify a

62
00:02:48,520 --> 00:02:50,830
selector for the name of this component

63
00:02:50,830 --> 00:02:54,080
when used as a directive in the HTML. Now

64
00:02:54,080 --> 00:02:55,659
that we've imported the appropriate

65
00:02:55,659 --> 00:02:58,419
module, we get IntelliSense for these

66
00:02:58,419 --> 00:03:01,129
properties. We set the selector two

67
00:03:01,129 --> 00:03:04,460
pmâ€‘root. The current convention is to

68
00:03:04,460 --> 00:03:06,439
prefix each selector with something to

69
00:03:06,439 --> 00:03:09,430
identify it as part of our application, so

70
00:03:09,430 --> 00:03:13,039
we selected pm for product management. We

71
00:03:13,039 --> 00:03:14,909
end with a name that represents this

72
00:03:14,909 --> 00:03:17,990
component, so we used root since this is

73
00:03:17,990 --> 00:03:20,689
our root app component. We'll see how to

74
00:03:20,689 --> 00:03:23,210
identify our desired selector prefix to

75
00:03:23,210 --> 00:03:26,129
the Angular CLI in the building, testing,

76
00:03:26,129 --> 00:03:28,659
and deploying with the CLI module later in

77
00:03:28,659 --> 00:03:31,590
this course. Next, we define the template.

78
00:03:31,590 --> 00:03:35,060
To specify another property here, we enter

79
00:03:35,060 --> 00:03:37,409
a comma and then the name of the other

80
00:03:37,409 --> 00:03:40,830
property. We want to define template. Any

81
00:03:40,830 --> 00:03:43,120
valid HTML can be specified in the

82
00:03:43,120 --> 00:03:45,620
template. We'll dive deeper into templates

83
00:03:45,620 --> 00:03:48,620
in a later module. So for this example,

84
00:03:48,620 --> 00:03:52,000
I'll just paste in the HTML, and we're

85
00:03:52,000 --> 00:03:54,740
done. We have now created the first

86
00:03:54,740 --> 00:03:58,280
component for our application. Yay! But

87
00:03:58,280 --> 00:04:05,000
how do we use it? How do we display its template?

