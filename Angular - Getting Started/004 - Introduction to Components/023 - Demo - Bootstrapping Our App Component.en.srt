0
00:00:01,629 --> 00:00:04,919
In this demo, we'll set up index.html to

1
00:00:04,919 --> 00:00:08,000
host our application and examine the root

2
00:00:08,000 --> 00:00:10,942
Angular module that bootstraps our app

3
00:00:10,942 --> 00:00:14,109
component. Here we are back with our

4
00:00:14,109 --> 00:00:17,109
sample application exactly how we left it.

5
00:00:17,109 --> 00:00:19,789
Since I used the Angular CLI to create

6
00:00:19,789 --> 00:00:23,250
these starter files, the index.html file

7
00:00:23,250 --> 00:00:26,050
is already hosting our app component, and

8
00:00:26,050 --> 00:00:29,809
the app.module.ts file already bootstraps

9
00:00:29,809 --> 00:00:32,390
our app component. Let's take a look

10
00:00:32,390 --> 00:00:35,909
starting with the index.html file. To host

11
00:00:35,909 --> 00:00:38,100
our application, we use the component

12
00:00:38,100 --> 00:00:40,140
selector as a directive here within the

13
00:00:40,140 --> 00:00:42,899
body element. We can think of a directive

14
00:00:42,899 --> 00:00:46,740
as simply a custom HTML tag. Since I used

15
00:00:46,740 --> 00:00:48,700
the Angular CLI to create the starter

16
00:00:48,700 --> 00:00:51,219
files, the directive is already included

17
00:00:51,219 --> 00:00:54,500
here. Now let's open the app.module.ts

18
00:00:54,500 --> 00:00:58,630
file. Here is the class, and here is the

19
00:00:58,630 --> 00:01:01,619
@NgModule decorator defining this class as

20
00:01:01,619 --> 00:01:04,560
an Angular module. The declaration's array

21
00:01:04,560 --> 00:01:07,159
declares the AppComponent so that Angular

22
00:01:07,159 --> 00:01:10,069
can locate its selector. The imports array

23
00:01:10,069 --> 00:01:12,900
includes BrowserModule so the application

24
00:01:12,900 --> 00:01:15,260
runs correctly in the browser, and the

25
00:01:15,260 --> 00:01:18,010
bootstrap array lists our AppComponent as

26
00:01:18,010 --> 00:01:19,519
the starting component for our

27
00:01:19,519 --> 00:01:22,230
application. Looks like we are ready to

28
00:01:22,230 --> 00:01:25,170
run. We saw in the last module how to

29
00:01:25,170 --> 00:01:28,329
start the application by typing npm start

30
00:01:28,329 --> 00:01:31,310
in a terminal or command window. When the

31
00:01:31,310 --> 00:01:34,359
root AppComponent is loaded, the HTML from

32
00:01:34,359 --> 00:01:37,060
our component appears, and the binding in

33
00:01:37,060 --> 00:01:39,569
that HTML is replaced with the value of

34
00:01:39,569 --> 00:01:42,120
our page title property. We now have a

35
00:01:42,120 --> 00:01:45,655
working, albeit very small, application.

36
00:01:45,655 --> 00:01:48,439
Before closing the browser, let's take a

37
00:01:48,439 --> 00:01:50,439
moment and look at the browser developer

38
00:01:50,439 --> 00:01:54,209
tools. In Chrome, I'll press F12. The

39
00:01:54,209 --> 00:01:56,140
exact tools you see here depend on the

40
00:01:56,140 --> 00:01:59,430
browser you are using. I'm using Chrome.

41
00:01:59,430 --> 00:02:01,959
Most modern browsers provide a Console tab

42
00:02:01,959 --> 00:02:04,469
as part of the development tools. This is

43
00:02:04,469 --> 00:02:06,269
always the first place to look if the page

44
00:02:06,269 --> 00:02:08,710
does not appear as expected or doesn't

45
00:02:08,710 --> 00:02:11,289
appear at all. Errors, warnings, and other

46
00:02:11,289 --> 00:02:14,129
information is displayed here. Use the

47
00:02:14,129 --> 00:02:16,860
Elements tab or DOM explorer to view the

48
00:02:16,860 --> 00:02:20,050
HTML displayed in the page. This is a

49
00:02:20,050 --> 00:02:22,629
depiction of the DOM, or document object

50
00:02:22,629 --> 00:02:25,400
model. The document object model is a

51
00:02:25,400 --> 00:02:28,250
document model loaded into the browser and

52
00:02:28,250 --> 00:02:31,310
represents our HTML as a node tree where

53
00:02:31,310 --> 00:02:34,560
each node is a part of our HTML. Notice

54
00:02:34,560 --> 00:02:37,120
these scripts listed here. These aren't in

55
00:02:37,120 --> 00:02:40,280
our source index.html file. We'll talk

56
00:02:40,280 --> 00:02:42,479
about these bundles, what they are, and

57
00:02:42,479 --> 00:02:44,500
how they got here in the Building,

58
00:02:44,500 --> 00:02:47,050
Testing, and Deploying with the CLI module

59
00:02:47,050 --> 00:02:50,870
later in this course. Here is our selector

60
00:02:50,870 --> 00:02:53,610
tag. Open the selector tag, and we see the

61
00:02:53,610 --> 00:02:56,120
HTML that we defined in our Components

62
00:02:56,120 --> 00:02:58,909
template. This view is a great way to see

63
00:02:58,909 --> 00:03:02,370
the HTML for the rendered page. There is

64
00:03:02,370 --> 00:03:05,020
also a debugger option available here on

65
00:03:05,020 --> 00:03:08,669
the Sources tab to view in debugger code.

66
00:03:08,669 --> 00:03:11,750
Since the Angular CLI uses webpack, our

67
00:03:11,750 --> 00:03:13,680
TypeScript files are listed under the

68
00:03:13,680 --> 00:03:17,319
webpack node here. And because the Angular

69
00:03:17,319 --> 00:03:20,480
CLI serve feature generates the map files,

70
00:03:20,480 --> 00:03:23,740
we can debug our TypeScript code directly.

71
00:03:23,740 --> 00:03:26,349
We can set a break point, refresh the

72
00:03:26,349 --> 00:03:29,819
browser, and it hits that break point. We

73
00:03:29,819 --> 00:03:31,930
can step through and check the value of

74
00:03:31,930 --> 00:03:35,069
any of our properties. Click here to

75
00:03:35,069 --> 00:03:38,030
resume. Use these debugging features

76
00:03:38,030 --> 00:03:41,519
anytime you need them. Before we move on,

77
00:03:41,519 --> 00:03:49,000
let's talk a moment about the Angular compiler.

