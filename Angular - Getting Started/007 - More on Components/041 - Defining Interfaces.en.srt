0
00:00:02,240 --> 00:00:04,754
One of the benefits of using TypeScript is

1
00:00:04,754 --> 00:00:08,050
its strong typing. Every property has a

2
00:00:08,050 --> 00:00:10,980
type, every method has a return type, and

3
00:00:10,980 --> 00:00:13,839
every method parameter has a type. The

4
00:00:13,839 --> 00:00:15,900
strong typing helps minimize errors

5
00:00:15,900 --> 00:00:17,579
through better syntax, checking, and

6
00:00:17,579 --> 00:00:20,879
tooling. In some cases, however, we have a

7
00:00:20,879 --> 00:00:23,109
property or method that does not have a

8
00:00:23,109 --> 00:00:27,019
predefined type such as our products array

9
00:00:27,019 --> 00:00:29,339
here. We defined our products array as

10
00:00:29,339 --> 00:00:31,960
any, which negates the benefits of strong

11
00:00:31,960 --> 00:00:35,600
typing. To specify custom types, we can

12
00:00:35,600 --> 00:00:39,439
define an interface. An interface is a

13
00:00:39,439 --> 00:00:42,219
specification identifying a related set of

14
00:00:42,219 --> 00:00:45,130
properties and methods. A class commits to

15
00:00:45,130 --> 00:00:47,070
supporting the specification by

16
00:00:47,070 --> 00:00:49,859
implementing the interface. That means the

17
00:00:49,859 --> 00:00:51,979
class includes code for each property and

18
00:00:51,979 --> 00:00:54,969
method identified in the interface. We can

19
00:00:54,969 --> 00:00:59,454
then use the interface as a data type. ES5

20
00:00:59,454 --> 00:01:03,340
and ES2015 do not support interfaces, but

21
00:01:03,340 --> 00:01:05,950
TypeScript does, so interfaces are

22
00:01:05,950 --> 00:01:08,439
transpiled out and are not found in the

23
00:01:08,439 --> 00:01:11,170
resulting JavaScript. This means that

24
00:01:11,170 --> 00:01:14,280
interfaces are development time only.

25
00:01:14,280 --> 00:01:16,609
Their purpose is to provide strong typing

26
00:01:16,609 --> 00:01:19,439
and better tooling support as we build,

27
00:01:19,439 --> 00:01:23,310
debug, and maintain our code. Here is an

28
00:01:23,310 --> 00:01:26,530
example of a TypeScript interface. We

29
00:01:26,530 --> 00:01:28,969
define an interface using the interface

30
00:01:28,969 --> 00:01:31,719
keyword, followed by the interface name,

31
00:01:31,719 --> 00:01:33,489
which is often the name of the business

32
00:01:33,489 --> 00:01:36,280
object that the interface describes. By

33
00:01:36,280 --> 00:01:38,510
many naming conventions, the interface is

34
00:01:38,510 --> 00:01:41,609
prefixed with an I for interface, though

35
00:01:41,609 --> 00:01:43,859
some TypeScript developers leave off this

36
00:01:43,859 --> 00:01:46,890
prefix. The export keyword here at the

37
00:01:46,890 --> 00:01:49,560
front exports this interface, thereby

38
00:01:49,560 --> 00:01:51,819
making it available for use anywhere in

39
00:01:51,819 --> 00:01:54,900
the application. The body of the interface

40
00:01:54,900 --> 00:01:56,849
defines the set of properties and methods

41
00:01:56,849 --> 00:01:59,489
appropriate for this business object. For

42
00:01:59,489 --> 00:02:01,367
each property, the interface includes

43
00:02:01,367 --> 00:02:04,058
property name, a colon, and the property

44
00:02:04,058 --> 00:02:07,237
data type. For each method, the interface

45
00:02:07,237 --> 00:02:09,298
includes the method name, the list of

46
00:02:09,298 --> 00:02:11,788
parameters, along with their data types, a

47
00:02:11,788 --> 00:02:15,747
colon, and the method return type. To use

48
00:02:15,747 --> 00:02:18,427
the interface as a data type, we import

49
00:02:18,427 --> 00:02:21,407
the interface, then use the interface name

50
00:02:21,407 --> 00:02:24,948
as the data type. Looks easy enough, let's

51
00:02:24,948 --> 00:02:28,798
try it out. We are back in the sample

52
00:02:28,798 --> 00:02:30,957
application, looking at the ProductList

53
00:02:30,957 --> 00:02:33,897
component. Here we see that we defined our

54
00:02:33,897 --> 00:02:37,108
products array as any, so let's create an

55
00:02:37,108 --> 00:02:40,397
interface that defines what a product is.

56
00:02:40,397 --> 00:02:42,888
We'll put the interface into its own file

57
00:02:42,888 --> 00:02:45,717
in the products folder. We'll name that

58
00:02:45,717 --> 00:02:49,223
file product.ts after the business object

59
00:02:49,223 --> 00:02:52,497
it defines. We first type the export

60
00:02:52,497 --> 00:02:54,848
keyword to ensure the other parts of the

61
00:02:54,848 --> 00:02:57,657
application can use this interface. That

62
00:02:57,657 --> 00:03:00,437
is, after all, why we are creating it.

63
00:03:00,437 --> 00:03:03,467
Next, we type in the interface keyword,

64
00:03:03,467 --> 00:03:06,048
then the name of the interface. I like to

65
00:03:06,048 --> 00:03:07,987
use the I prefix to distinguish the

66
00:03:07,987 --> 00:03:10,548
interface from the business object, and we

67
00:03:10,548 --> 00:03:13,632
are defining a product, so IProduct.

68
00:03:13,632 --> 00:03:16,168
Inside the interface, we define the

69
00:03:16,168 --> 00:03:18,277
properties and methods appropriate for the

70
00:03:18,277 --> 00:03:20,657
business object. For our sample

71
00:03:20,657 --> 00:03:23,848
application, we only need properties. For

72
00:03:23,848 --> 00:03:25,777
each property, we define the property

73
00:03:25,777 --> 00:03:28,228
name, a colon, and the type of the

74
00:03:28,228 --> 00:03:30,818
property. Notice that we are typing the

75
00:03:30,818 --> 00:03:33,848
releaseDate as a string. If we later work

76
00:03:33,848 --> 00:03:36,487
with this value as a date object, we could

77
00:03:36,487 --> 00:03:39,277
change this type to a date. That's it.

78
00:03:39,277 --> 00:03:41,367
That's all we have to do to define an

79
00:03:41,367 --> 00:03:44,598
interface. Now we can use this interface

80
00:03:44,598 --> 00:03:46,687
as our data type in the ProductList

81
00:03:46,687 --> 00:03:49,638
component. Before we do though, let's try

82
00:03:49,638 --> 00:03:52,497
something. Let's introduce a typographical

83
00:03:52,497 --> 00:03:55,647
error into our products array. No error is

84
00:03:55,647 --> 00:03:57,828
detected. We won't even know we made a

85
00:03:57,828 --> 00:04:00,177
mistake until we see the application in

86
00:04:00,177 --> 00:04:03,218
the browser. And we notice that no image

87
00:04:03,218 --> 00:04:06,336
is displayed for one of the products. As

88
00:04:06,336 --> 00:04:08,265
you can imagine, these kinds of errors

89
00:04:08,265 --> 00:04:11,265
could cause hard‑to‑find bugs. Now let's

90
00:04:11,265 --> 00:04:15,436
replace the any with IProduct. We get a

91
00:04:15,436 --> 00:04:19,346
syntax error. What did we miss? Yep, we

92
00:04:19,346 --> 00:04:23,696
need an import, and bang. Now that our

93
00:04:23,696 --> 00:04:25,906
array of products is strongly typed, we

94
00:04:25,906 --> 00:04:28,086
are notified that we made an error in our

95
00:04:28,086 --> 00:04:30,786
product array property. We don't even have

96
00:04:30,786 --> 00:04:32,516
to view it in the browser to see that

97
00:04:32,516 --> 00:04:35,045
something is amiss. So this is a good

98
00:04:35,045 --> 00:04:37,125
demonstration of one of the benefits of

99
00:04:37,125 --> 00:04:40,276
strong typing. Let's fix that error.

100
00:04:40,276 --> 00:04:42,235
Notice that we get IntelliSense now for

101
00:04:42,235 --> 00:04:44,776
these properties, another great benefit of

102
00:04:44,776 --> 00:04:47,266
strong typing. Let's check this out in the

103
00:04:47,266 --> 00:04:52,096
browser. Now everything works as it did.

104
00:04:52,096 --> 00:04:56,105
In our interface file, we could define a

105
00:04:56,105 --> 00:04:58,801
class for the product business object here

106
00:04:58,801 --> 00:05:02,036
as well, something like this. In general,

107
00:05:02,036 --> 00:05:04,545
we only create a business object class if

108
00:05:04,545 --> 00:05:06,836
that class provides some functionality

109
00:05:06,836 --> 00:05:08,305
that we want to use throughout our

110
00:05:08,305 --> 00:05:10,536
application, such as this

111
00:05:10,536 --> 00:05:13,545
calculateDiscount method. And if we think

112
00:05:13,545 --> 00:05:15,545
we might want to create a business object

113
00:05:15,545 --> 00:05:17,545
at some point in the future, then we

114
00:05:17,545 --> 00:05:20,125
definitely want to add the I prefix to our

115
00:05:20,125 --> 00:05:23,206
interface, but for our sample application,

116
00:05:23,206 --> 00:05:25,786
we don't need any product methods, so we

117
00:05:25,786 --> 00:05:29,536
don't really need a product class. We will

118
00:05:29,536 --> 00:05:31,545
use this interface throughout the

119
00:05:31,545 --> 00:05:35,125
application to strongly type our products.

120
00:05:35,125 --> 00:05:41,000
Next, let's look at encapsulating components styles.

