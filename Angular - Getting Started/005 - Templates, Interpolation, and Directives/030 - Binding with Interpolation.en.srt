0
00:00:02,439 --> 00:00:04,780
In Angular, binding coordinates

1
00:00:04,780 --> 00:00:06,750
communication between the component's

2
00:00:06,750 --> 00:00:10,240
class and its template and often involves

3
00:00:10,240 --> 00:00:13,560
passing data. We can provide values from

4
00:00:13,560 --> 00:00:16,870
the class to the template for display, and

5
00:00:16,870 --> 00:00:19,329
the template raises events to pass user

6
00:00:19,329 --> 00:00:22,219
actions or user‑entered values back to the

7
00:00:22,219 --> 00:00:25,149
class. The binding syntax is always

8
00:00:25,149 --> 00:00:27,879
defined in the template. Angular provides

9
00:00:27,879 --> 00:00:30,179
several types of binding, and we'll look

10
00:00:30,179 --> 00:00:33,000
at each of them. In this module we cover

11
00:00:33,000 --> 00:00:35,609
interpolation. The remaining data binding

12
00:00:35,609 --> 00:00:39,039
techniques are covered in the next module.

13
00:00:39,039 --> 00:00:41,119
The double curly braces that signify

14
00:00:41,119 --> 00:00:44,640
interpolation are readily recognizable.

15
00:00:44,640 --> 00:00:47,140
The pageTitle in this example is bound to

16
00:00:47,140 --> 00:00:50,310
a property in the component's class.

17
00:00:50,310 --> 00:00:53,619
Interpolation is a one‑way binding from

18
00:00:53,619 --> 00:00:56,689
the class property to the template, so the

19
00:00:56,689 --> 00:00:59,740
value here shows up here. Interpolation

20
00:00:59,740 --> 00:01:02,320
supports much more than simple properties.

21
00:01:02,320 --> 00:01:04,489
We can perform operations such as

22
00:01:04,489 --> 00:01:08,030
concatenation or simple calculations. We

23
00:01:08,030 --> 00:01:10,219
can even call a class method, such as

24
00:01:10,219 --> 00:01:13,370
getTitle shown here. We use interpolation

25
00:01:13,370 --> 00:01:16,079
to insert the interpolated strings into

26
00:01:16,079 --> 00:01:19,370
the text between HTML elements, as shown

27
00:01:19,370 --> 00:01:22,540
here. Or we can use interpolation with

28
00:01:22,540 --> 00:01:25,299
element property assignments, as in this

29
00:01:25,299 --> 00:01:28,310
example. Here we assign the innerText

30
00:01:28,310 --> 00:01:31,140
property of the h1 element to a bound

31
00:01:31,140 --> 00:01:34,400
value. Both of these examples display the

32
00:01:34,400 --> 00:01:38,099
same result. The syntax between the

33
00:01:38,099 --> 00:01:40,500
interpolation curly braces is called a

34
00:01:40,500 --> 00:01:43,840
template expression. Angular evaluates

35
00:01:43,840 --> 00:01:46,540
that expression using the component as the

36
00:01:46,540 --> 00:01:49,540
context. So Angular looks to the component

37
00:01:49,540 --> 00:01:51,500
to obtain property values or to call

38
00:01:51,500 --> 00:01:54,400
methods. Angular then converts the result

39
00:01:54,400 --> 00:01:57,280
of the template expression to a string and

40
00:01:57,280 --> 00:01:58,849
assigns that string, to an element or

41
00:01:58,849 --> 00:02:01,769
directive property. So any time we want to

42
00:02:01,769 --> 00:02:04,629
display read‑only data, we define a

43
00:02:04,629 --> 00:02:07,189
property for that data in our class and

44
00:02:07,189 --> 00:02:09,599
use interpolation to display that data in

45
00:02:09,599 --> 00:02:12,069
the template. And if we need to perform

46
00:02:12,069 --> 00:02:14,750
simple calculations or get a result from a

47
00:02:14,750 --> 00:02:17,370
method, we can do that with interpretation

48
00:02:17,370 --> 00:02:22,370
as well. Let's give this a try. Looking at

49
00:02:22,370 --> 00:02:24,310
the product list template from our sample

50
00:02:24,310 --> 00:02:27,009
application, we hardcoded in the page

51
00:02:27,009 --> 00:02:29,599
title here. In the heading. Binding the

52
00:02:29,599 --> 00:02:31,669
heading to a property in the class instead

53
00:02:31,669 --> 00:02:34,370
of hardcoding it in the HTML makes it

54
00:02:34,370 --> 00:02:36,620
easier to see and change when working on

55
00:02:36,620 --> 00:02:39,129
the code, and we could later retrieve this

56
00:02:39,129 --> 00:02:42,330
text from a file or database. Let's start

57
00:02:42,330 --> 00:02:44,699
by adding a property in the class for the

58
00:02:44,699 --> 00:02:47,560
page title. We'll open the component to

59
00:02:47,560 --> 00:02:51,139
the right and close down the explorer.

60
00:02:51,139 --> 00:02:53,680
Here in the class, we specify the property

61
00:02:53,680 --> 00:02:57,490
name. We'll call it pageTitle, and because

62
00:02:57,490 --> 00:02:59,550
we are using TypeScript, we define the

63
00:02:59,550 --> 00:03:02,889
type for this property. Lastly, we assign

64
00:03:02,889 --> 00:03:06,610
a default value, Product List. With the

65
00:03:06,610 --> 00:03:08,969
pageTitle property in place, we can now

66
00:03:08,969 --> 00:03:11,280
bind to the pageTitle property in the

67
00:03:11,280 --> 00:03:14,259
template. We replace the hardcoded product

68
00:03:14,259 --> 00:03:17,969
list here with interpolation and specify

69
00:03:17,969 --> 00:03:20,650
the name of the property. Now when this

70
00:03:20,650 --> 00:03:23,379
template is displayed, Angular assigns the

71
00:03:23,379 --> 00:03:26,340
string value of the pageTitle property to

72
00:03:26,340 --> 00:03:28,569
the innerText property of this div

73
00:03:28,569 --> 00:03:31,020
element, and Product List will be

74
00:03:31,020 --> 00:03:33,889
displayed. Let's see the result in the

75
00:03:33,889 --> 00:03:36,710
browser. With our binding, the page title

76
00:03:36,710 --> 00:03:40,509
appears as before. So we can confirm that

77
00:03:40,509 --> 00:03:42,919
it works, I've rearranged the windows so

78
00:03:42,919 --> 00:03:45,150
that we can see both the code and the

79
00:03:45,150 --> 00:03:47,900
browser. Now let's make a change to our

80
00:03:47,900 --> 00:03:51,539
pageTitle here, and we immediately see it

81
00:03:51,539 --> 00:03:54,389
in the browser. So our interpolation

82
00:03:54,389 --> 00:03:57,930
works. So any time we want to display the

83
00:03:57,930 --> 00:04:00,740
value of a component property, we simply

84
00:04:00,740 --> 00:04:07,000
use interpolation. Now we're ready to add some logic to our template

