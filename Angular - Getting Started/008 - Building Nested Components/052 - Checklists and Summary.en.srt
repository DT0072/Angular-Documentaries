0
00:00:02,040 --> 00:00:04,589
We build a nested component using the same

1
00:00:04,589 --> 00:00:06,820
techniques we use to build any other

2
00:00:06,820 --> 00:00:09,279
Angular component. We won't review that

3
00:00:09,279 --> 00:00:11,769
again here. Let's instead lay out a

4
00:00:11,769 --> 00:00:15,169
checklist for inputs and outputs. Decorate

5
00:00:15,169 --> 00:00:17,429
a nested component property with the input

6
00:00:17,429 --> 00:00:20,649
decorator anytime it needs input data from

7
00:00:20,649 --> 00:00:23,320
its container. Any type of component

8
00:00:23,320 --> 00:00:25,570
property can be decorated with the input

9
00:00:25,570 --> 00:00:29,190
decorator. Don't forget the @ prefix, and

10
00:00:29,190 --> 00:00:31,480
since the input decorator is a function,

11
00:00:31,480 --> 00:00:33,100
follow it with open and closing

12
00:00:33,100 --> 00:00:36,100
parentheses. Decorate a nested component

13
00:00:36,100 --> 00:00:39,090
property with the output decorator anytime

14
00:00:39,090 --> 00:00:41,539
it needs to raise events and optionally

15
00:00:41,539 --> 00:00:44,270
pass information back to its container.

16
00:00:44,270 --> 00:00:47,189
Only properties of type EventEmitter

17
00:00:47,189 --> 00:00:48,969
should be marked with the output

18
00:00:48,969 --> 00:00:52,270
decorator. Use the EventEmitter's generic

19
00:00:52,270 --> 00:00:55,100
argument to specify the type of the event

20
00:00:55,100 --> 00:00:58,530
payload, and use the new keyword to create

21
00:00:58,530 --> 00:01:01,420
an instance of the EventEmitter. Don't

22
00:01:01,420 --> 00:01:04,099
forget the @ prefix, and since the output

23
00:01:04,099 --> 00:01:06,859
decorator is a function, suffix it with

24
00:01:06,859 --> 00:01:10,250
open and closing parentheses. In a

25
00:01:10,250 --> 00:01:12,629
container component's template, use the

26
00:01:12,629 --> 00:01:15,579
nested component as a directive. For the

27
00:01:15,579 --> 00:01:17,629
name of the directive, see the nested

28
00:01:17,629 --> 00:01:20,689
component's selector property. Use

29
00:01:20,689 --> 00:01:22,909
property binding to pass data to the

30
00:01:22,909 --> 00:01:25,459
nested component. Any property of the

31
00:01:25,459 --> 00:01:27,519
nested component that is decorated with

32
00:01:27,519 --> 00:01:29,980
the input decorator can be used as a

33
00:01:29,980 --> 00:01:32,769
binding target. Use event binding to

34
00:01:32,769 --> 00:01:34,709
respond to events from the nested

35
00:01:34,709 --> 00:01:37,579
component. Any event that is decorated

36
00:01:37,579 --> 00:01:39,870
with the output decorator can be used as

37
00:01:39,870 --> 00:01:43,400
the binding target, and use $event to

38
00:01:43,400 --> 00:01:46,000
access the event payload passed from the

39
00:01:46,000 --> 00:01:49,650
nested component. To learn more about

40
00:01:49,650 --> 00:01:52,629
nested or child components, check out the

41
00:01:52,629 --> 00:01:54,969
Angular Component Communication course

42
00:01:54,969 --> 00:01:59,090
here in the Pluralsight library. This

43
00:01:59,090 --> 00:02:02,200
module was all about nested components. We

44
00:02:02,200 --> 00:02:04,390
began by building a component that could

45
00:02:04,390 --> 00:02:07,299
be nested within other components. We then

46
00:02:07,299 --> 00:02:08,840
walked through how to use the nested

47
00:02:08,840 --> 00:02:11,409
component within a container. We saw how

48
00:02:11,409 --> 00:02:13,979
to pass data into the nested component by

49
00:02:13,979 --> 00:02:15,770
binding to a property marked with the

50
00:02:15,770 --> 00:02:18,539
input decorator, and we discovered how to

51
00:02:18,539 --> 00:02:21,159
pass data out of the nested component by

52
00:02:21,159 --> 00:02:23,319
raising an event marked with the output

53
00:02:23,319 --> 00:02:26,889
decorator. In this module, we built the

54
00:02:26,889 --> 00:02:29,909
star component and nested it within the

55
00:02:29,909 --> 00:02:32,710
ProductListComponent. We can reuse this

56
00:02:32,710 --> 00:02:35,840
component in any other component of the

57
00:02:35,840 --> 00:02:36,750
application such as the

58
00:02:36,750 --> 00:02:40,360
ProductDetailComponent. Next up, let's

59
00:02:40,360 --> 00:02:42,740
check out how to build an Angular service

60
00:02:42,740 --> 00:02:48,000
so we won't need hardâ€‘coded product data in our component.

