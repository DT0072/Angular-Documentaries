0
00:00:02,040 --> 00:00:04,549
We just saw how the container passes data

1
00:00:04,549 --> 00:00:07,200
to the nested component by binding to a

2
00:00:07,200 --> 00:00:09,330
nested component property that is

3
00:00:09,330 --> 00:00:12,570
decorated with the Input decorator. If the

4
00:00:12,570 --> 00:00:15,140
nested component wants to send information

5
00:00:15,140 --> 00:00:17,870
back to its container, it can raise an

6
00:00:17,870 --> 00:00:20,820
event. The nested component exposes an

7
00:00:20,820 --> 00:00:23,370
event it can use to pass output to its

8
00:00:23,370 --> 00:00:27,449
container using the aptly named Output

9
00:00:27,449 --> 00:00:30,670
decorator. We can use the Output decorator

10
00:00:30,670 --> 00:00:32,799
to decorate any property of the nested

11
00:00:32,799 --> 00:00:35,840
component's class. However, the property

12
00:00:35,840 --> 00:00:39,549
type must be an event. The only way a

13
00:00:39,549 --> 00:00:41,899
nested component can pass data back to its

14
00:00:41,899 --> 00:00:45,170
container is with an event. The data to

15
00:00:45,170 --> 00:00:48,049
pass becomes the event payload. In

16
00:00:48,049 --> 00:00:50,179
Angular, an event is defined with an

17
00:00:50,179 --> 00:00:53,679
EventEmitter object. So here we create a

18
00:00:53,679 --> 00:00:56,770
new instance of an EventEmitter. Notice

19
00:00:56,770 --> 00:00:59,850
the syntax here. TypeScript supports

20
00:00:59,850 --> 00:01:02,609
generics. If you are not familiar with

21
00:01:02,609 --> 00:01:05,260
generics, this syntax allows us to

22
00:01:05,260 --> 00:01:08,250
identify a specific type that the object

23
00:01:08,250 --> 00:01:10,769
instance will work with. When creating an

24
00:01:10,769 --> 00:01:13,239
EventEmitter, the generic argument

25
00:01:13,239 --> 00:01:16,890
identifies the type of the event payload.

26
00:01:16,890 --> 00:01:19,120
If we want to pass a string value to the

27
00:01:19,120 --> 00:01:21,840
container in the event payload, we define

28
00:01:21,840 --> 00:01:24,420
string here. If we want to pass an

29
00:01:24,420 --> 00:01:27,560
integer, we define number here. If we want

30
00:01:27,560 --> 00:01:30,500
to pass multiple values, we can specify an

31
00:01:30,500 --> 00:01:34,280
object here. In this example, we define a

32
00:01:34,280 --> 00:01:38,099
notify event with a string payload. When

33
00:01:38,099 --> 00:01:40,340
the user clicks on the stars, the

34
00:01:40,340 --> 00:01:43,480
StarComponent receives that click event.

35
00:01:43,480 --> 00:01:46,269
We use event binding in the StarComponent

36
00:01:46,269 --> 00:01:49,030
template to call the StarComponent's

37
00:01:49,030 --> 00:01:52,430
onClick method. In the onClick method, we

38
00:01:52,430 --> 00:01:55,609
use the notify event property and call its

39
00:01:55,609 --> 00:01:58,540
emit method to raise the notify event to

40
00:01:58,540 --> 00:02:01,519
the container. If we want to pass data in

41
00:02:01,519 --> 00:02:04,469
the event payload, we pass that data into

42
00:02:04,469 --> 00:02:07,435
the emit method. In this example, the

43
00:02:07,435 --> 00:02:10,409
onClick method raises the notify event and

44
00:02:10,409 --> 00:02:12,580
sets the event payload to a string

45
00:02:12,580 --> 00:02:16,460
message. The container component receives

46
00:02:16,460 --> 00:02:19,580
that event with the specified payload. In

47
00:02:19,580 --> 00:02:22,250
the container component's template, we use

48
00:02:22,250 --> 00:02:25,599
event binding to bind to this notify event

49
00:02:25,599 --> 00:02:28,409
and call a method. We access the event

50
00:02:28,409 --> 00:02:32,770
payload using $event. The only time we can

51
00:02:32,770 --> 00:02:35,840
specify a nested component's property as

52
00:02:35,840 --> 00:02:38,289
an eventâ€‘binding target on the left side

53
00:02:38,289 --> 00:02:40,879
of an equals is when that property is

54
00:02:40,879 --> 00:02:44,919
decorated with the Output decorator.

55
00:02:44,919 --> 00:02:47,949
Lastly, the container component provides

56
00:02:47,949 --> 00:02:50,099
the method to execute when the notify

57
00:02:50,099 --> 00:02:53,210
event occurs. Since the event payload is a

58
00:02:53,210 --> 00:02:56,419
string, this function takes in a string.

59
00:02:56,419 --> 00:02:59,719
Here we can perform any desired action.

60
00:02:59,719 --> 00:03:03,530
Hmm, lots of moving parts here. Let's jump

61
00:03:03,530 --> 00:03:07,699
into the code and try it out. We are back

62
00:03:07,699 --> 00:03:09,759
in the sample application looking at the

63
00:03:09,759 --> 00:03:13,389
StarComponent. What is our goal? When the

64
00:03:13,389 --> 00:03:16,099
user clicks on one of the rating stars, we

65
00:03:16,099 --> 00:03:18,995
want to display that rating in the header.

66
00:03:18,995 --> 00:03:21,650
This feature may not be incredibly useful,

67
00:03:21,650 --> 00:03:24,099
but it will demonstrate how to pass events

68
00:03:24,099 --> 00:03:26,620
from our nested child component to the

69
00:03:26,620 --> 00:03:29,860
parent container component. So our first

70
00:03:29,860 --> 00:03:32,259
task is to respond to the user's click

71
00:03:32,259 --> 00:03:35,469
event on the star rating. We do that using

72
00:03:35,469 --> 00:03:37,800
event binding in the StarComponent's

73
00:03:37,800 --> 00:03:40,080
template. We'll bind the div element's

74
00:03:40,080 --> 00:03:42,879
click event to an onClick method in the

75
00:03:42,879 --> 00:03:46,099
StarComponent class. Next, let's implement

76
00:03:46,099 --> 00:03:50,490
this onClick method in the component. Hmm,

77
00:03:50,490 --> 00:03:52,030
somehow in this method, we need to send

78
00:03:52,030 --> 00:03:54,319
out a notification of this click to the

79
00:03:54,319 --> 00:03:57,129
container. For now, let's just log out

80
00:03:57,129 --> 00:03:59,139
that the rating was clicked. In this

81
00:03:59,139 --> 00:04:03,122
example, we use the ES2015 backticks to

82
00:04:03,122 --> 00:04:06,252
define a template string. This allows us

83
00:04:06,252 --> 00:04:08,532
to embed the rating directly into this

84
00:04:08,532 --> 00:04:11,853
string. Let's try it out in the browser.

85
00:04:11,853 --> 00:04:14,573
Open the developer tools and click on the

86
00:04:14,573 --> 00:04:18,413
rating stars. We see it log to the console

87
00:04:18,413 --> 00:04:21,733
here. Going back to the code, we need to

88
00:04:21,733 --> 00:04:24,182
send out a notification to the container

89
00:04:24,182 --> 00:04:26,612
when the user clicks on the star rating of

90
00:04:26,612 --> 00:04:28,983
the nested component. Recall from the

91
00:04:28,983 --> 00:04:30,783
slides how the nested component

92
00:04:30,783 --> 00:04:33,682
communicates with its container. It uses

93
00:04:33,682 --> 00:04:37,153
an event with the Output decorator. Let's

94
00:04:37,153 --> 00:04:39,473
define an event property in the nested

95
00:04:39,473 --> 00:04:42,952
component. We'll call it ratingClicked.

96
00:04:42,952 --> 00:04:45,752
Since this must be an event, we define the

97
00:04:45,752 --> 00:04:49,202
type of this property to be EventEmitter.

98
00:04:49,202 --> 00:04:51,692
We'll use the provided quick fix toe add

99
00:04:51,692 --> 00:04:54,783
EventEmitter to the import statement. We

100
00:04:54,783 --> 00:04:56,983
want to pass a string to the container as

101
00:04:56,983 --> 00:05:00,023
part of this event, so we specify string

102
00:05:00,023 --> 00:05:03,423
as the generic argument. We then set the

103
00:05:03,423 --> 00:05:05,872
ratingClicked property to a new instance

104
00:05:05,872 --> 00:05:10,403
of EventEmitter. This sets up our event.

105
00:05:10,403 --> 00:05:13,153
Next, we decorate our event property with

106
00:05:13,153 --> 00:05:15,963
the Output decorator so that the container

107
00:05:15,963 --> 00:05:18,622
can respond to this event. The Output

108
00:05:18,622 --> 00:05:21,002
decorator is a function, so we add

109
00:05:21,002 --> 00:05:24,213
parentheses. In this example, we are

110
00:05:24,213 --> 00:05:26,952
decorating only one property of the nested

111
00:05:26,952 --> 00:05:29,543
component with the Output decorator, but

112
00:05:29,543 --> 00:05:32,523
we are not limited to one. We can expose

113
00:05:32,523 --> 00:05:35,423
multiple output properties as needed as

114
00:05:35,423 --> 00:05:37,733
long as they're events. Here in our

115
00:05:37,733 --> 00:05:40,403
onClick method, we want to raise this

116
00:05:40,403 --> 00:05:43,192
event to the container and pass along our

117
00:05:43,192 --> 00:05:46,603
message. We use the event property and

118
00:05:46,603 --> 00:05:48,963
call its emit method, passing in the

119
00:05:48,963 --> 00:05:52,322
desired string. The emit method raises the

120
00:05:52,322 --> 00:05:55,192
event. Now that we are raising this

121
00:05:55,192 --> 00:05:57,853
ratingClicked event to our container, how

122
00:05:57,853 --> 00:06:00,333
does the container listen for and respond

123
00:06:00,333 --> 00:06:04,658
to this event? It uses event binding. In

124
00:06:04,658 --> 00:06:07,137
this example, our container is the

125
00:06:07,137 --> 00:06:09,187
ProductListComponent. In the

126
00:06:09,187 --> 00:06:11,867
ProductListComponent template, we bind to

127
00:06:11,867 --> 00:06:14,267
the event raised from the StarComponent

128
00:06:14,267 --> 00:06:17,468
using event binding. For event binding, we

129
00:06:17,468 --> 00:06:20,257
use parentheses and specify the name of

130
00:06:20,257 --> 00:06:23,418
the event to listen for. We want to listen

131
00:06:23,418 --> 00:06:25,947
for the ratingClicked event raised by the

132
00:06:25,947 --> 00:06:29,247
StarComponent. Now what do we want to do

133
00:06:29,247 --> 00:06:31,887
when the event is raised? We'll need to

134
00:06:31,887 --> 00:06:33,127
define a method in the

135
00:06:33,127 --> 00:06:36,017
ProductListComponent class to process the

136
00:06:36,017 --> 00:06:39,307
event. Let's call that method

137
00:06:39,307 --> 00:06:41,747
onRatingClicked. Recall that we are

138
00:06:41,747 --> 00:06:44,677
passing a string when raising this event,

139
00:06:44,677 --> 00:06:46,947
so let's pass that string into our

140
00:06:46,947 --> 00:06:50,057
onRatingClicked method. We do that using

141
00:06:50,057 --> 00:06:53,687
$event. $event passes along any

142
00:06:53,687 --> 00:06:56,367
information associated with the generated

143
00:06:56,367 --> 00:06:59,548
event. Next, we need to write the code for

144
00:06:59,548 --> 00:07:02,117
this method in the ProductListComponent

145
00:07:02,117 --> 00:07:05,218
class. Our template is expecting that we

146
00:07:05,218 --> 00:07:07,937
have a method called onRatingClicked, and

147
00:07:07,937 --> 00:07:09,867
it's passing a string message with the

148
00:07:09,867 --> 00:07:13,218
event. Our method returns no value, so we

149
00:07:13,218 --> 00:07:16,408
define the return type as void. Now that

150
00:07:16,408 --> 00:07:18,898
we have the message from the event, what

151
00:07:18,898 --> 00:07:21,757
do we want to do with it? Our goal was to

152
00:07:21,757 --> 00:07:24,187
display it on the page title, so we'll

153
00:07:24,187 --> 00:07:26,887
modify the page title to display product

154
00:07:26,887 --> 00:07:29,387
list and the message from the nested

155
00:07:29,387 --> 00:07:32,708
StarComponent. Okay yeah, that is not a

156
00:07:32,708 --> 00:07:35,168
very realâ€‘world example, but I wanted to

157
00:07:35,168 --> 00:07:37,718
keep this as straightforward as possible.

158
00:07:37,718 --> 00:07:39,937
We'd have a better example if the nested

159
00:07:39,937 --> 00:07:42,408
component contained an input box and we

160
00:07:42,408 --> 00:07:44,517
could pass the user's input in the event

161
00:07:44,517 --> 00:07:46,867
payload. But you get the general idea

162
00:07:46,867 --> 00:07:49,017
here. Let's see how this works in the

163
00:07:49,017 --> 00:07:52,267
browser. Click on the star rating, and we

164
00:07:52,267 --> 00:07:54,437
see the page title change to display the

165
00:07:54,437 --> 00:07:56,108
message received from the nested

166
00:07:56,108 --> 00:08:00,778
component. Success! We just saw how the

167
00:08:00,778 --> 00:08:02,827
container passes data to the nested

168
00:08:02,827 --> 00:08:05,567
component by binding to a nested component

169
00:08:05,567 --> 00:08:08,216
property that is decorated with the Input

170
00:08:08,216 --> 00:08:11,386
decorator and how the nested component

171
00:08:11,386 --> 00:08:14,086
uses an event property decorated with the

172
00:08:14,086 --> 00:08:17,725
Output decorator to raise events. We can

173
00:08:17,725 --> 00:08:19,716
think of the properties decorated with the

174
00:08:19,716 --> 00:08:23,216
Input or Output decorators as the public

175
00:08:23,216 --> 00:08:26,295
API of the nestable component. Everything

176
00:08:26,295 --> 00:08:29,165
else in the component is encapsulated and

177
00:08:29,165 --> 00:08:31,216
only accessible to the component's

178
00:08:31,216 --> 00:08:34,015
template and class. Let's finish up this

179
00:08:34,015 --> 00:08:41,000
module with some checklists we can use as we build nestable components.

