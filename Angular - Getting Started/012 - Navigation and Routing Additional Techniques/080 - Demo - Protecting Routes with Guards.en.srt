0
00:00:02,540 --> 00:00:05,769
In this demo, we protect our ProductDetail

1
00:00:05,769 --> 00:00:08,720
route with a guard. We want to build a

2
00:00:08,720 --> 00:00:12,830
guard that prevents navigation to the

3
00:00:12,830 --> 00:00:15,160
ProductDetailComponent if the provided URL

4
00:00:15,160 --> 00:00:18,890
parameter is not valid. Recall that the

5
00:00:18,890 --> 00:00:20,179
route definition for the

6
00:00:20,179 --> 00:00:23,539
ProductDetailComponent includes an id, but

7
00:00:23,539 --> 00:00:26,179
there is nothing here that defines this id

8
00:00:26,179 --> 00:00:29,960
to be numeric or greater than 0, so our

9
00:00:29,960 --> 00:00:32,229
guard should prevent navigation to the

10
00:00:32,229 --> 00:00:36,670
ProductDetail route if the id is 0 or not

11
00:00:36,670 --> 00:00:39,649
a number. Our first step is to build our

12
00:00:39,649 --> 00:00:44,079
guard. We could build it manually, but why

13
00:00:44,079 --> 00:00:47,270
not use the Angular CLI? We open the

14
00:00:47,270 --> 00:00:51,149
integrated terminal and type ng, for the

15
00:00:51,149 --> 00:00:55,810
Angular CLI, g, for generate, g, for

16
00:00:55,810 --> 00:00:59,130
guard, and the name of our guard. Since

17
00:00:59,130 --> 00:01:01,640
this guard is for the ProductDetail route,

18
00:01:01,640 --> 00:01:04,689
we add it to the products folder. So,

19
00:01:04,689 --> 00:01:09,219
products/productâ€‘detail. That's all that

20
00:01:09,219 --> 00:01:12,640
is required. Press Enter, and the Angular

21
00:01:12,640 --> 00:01:15,579
CLI prompts us to select the type of guard

22
00:01:15,579 --> 00:01:18,590
we want to generate. We can select one or

23
00:01:18,590 --> 00:01:21,799
more guards. For our example, we only want

24
00:01:21,799 --> 00:01:24,599
the CanActivate guard, so press space to

25
00:01:24,599 --> 00:01:27,810
select it. Press Enter, and we see that

26
00:01:27,810 --> 00:01:30,950
the CLI created the guard and the start of

27
00:01:30,950 --> 00:01:34,670
a unit test for that guard. Let's open the

28
00:01:34,670 --> 00:01:37,980
resulting guard. The CLI added all of the

29
00:01:37,980 --> 00:01:41,900
basic boilerplate here for us. Yay! Let's

30
00:01:41,900 --> 00:01:44,469
talk through it. Since a guard is a

31
00:01:44,469 --> 00:01:47,209
service, it needs to be registered with an

32
00:01:47,209 --> 00:01:50,840
Angular injector. The CLI registers this

33
00:01:50,840 --> 00:01:53,549
guard with the root application injector

34
00:01:53,549 --> 00:01:56,590
using the providedIn property. It

35
00:01:56,590 --> 00:01:59,579
implements the CanActivate interface and

36
00:01:59,579 --> 00:02:01,859
builds the start of the CanActivate

37
00:02:01,859 --> 00:02:05,129
method. We can change this as needed if we

38
00:02:05,129 --> 00:02:06,969
want to implement a different type of

39
00:02:06,969 --> 00:02:11,530
guard. The CanActivate method has two

40
00:02:11,530 --> 00:02:14,050
parameters, the ActivatedRouteSnapshot to

41
00:02:14,050 --> 00:02:16,830
provide current route information, and the

42
00:02:16,830 --> 00:02:19,680
RouterStateSnapshot to provide router

43
00:02:19,680 --> 00:02:23,250
state information. The method can return

44
00:02:23,250 --> 00:02:26,250
an observable, a promise, or a simple

45
00:02:26,250 --> 00:02:29,650
Boolean value. All that's left is to write

46
00:02:29,650 --> 00:02:32,979
the logic for the guard. What do we want

47
00:02:32,979 --> 00:02:35,969
this method to do? We need to check the

48
00:02:35,969 --> 00:02:39,620
route URL and ensure that the id passed in

49
00:02:39,620 --> 00:02:43,000
is valid. If it is not valid, we want to

50
00:02:43,000 --> 00:02:46,139
navigate back to the Product List page.

51
00:02:46,139 --> 00:02:48,840
Navigation requires the router, so the

52
00:02:48,840 --> 00:02:52,189
first thing we need is a constructor. Then

53
00:02:52,189 --> 00:02:55,449
we inject in the router, letting VS Code

54
00:02:55,449 --> 00:02:59,060
import the appropriate package. Next, in

55
00:02:59,060 --> 00:03:01,530
the CanActivate, we need to read the

56
00:03:01,530 --> 00:03:05,069
parameter from the route. Luckily for us,

57
00:03:05,069 --> 00:03:07,949
CanActivate has a parameter that gives us

58
00:03:07,949 --> 00:03:10,539
the ActivatedRouteSnapshot. The

59
00:03:10,539 --> 00:03:12,629
ActivatedRouteSnapshot contains the

60
00:03:12,629 --> 00:03:14,639
information about a route at any

61
00:03:14,639 --> 00:03:17,490
particular moment in time. Now I'll paste

62
00:03:17,490 --> 00:03:19,419
the code for the method body and we can

63
00:03:19,419 --> 00:03:22,435
talk through it. The ProductDetail route

64
00:03:22,435 --> 00:03:26,210
URL is comprised of two segments, product

65
00:03:26,210 --> 00:03:29,330
and the requested id. We only care about

66
00:03:29,330 --> 00:03:31,740
the id, so we pull the path from the

67
00:03:31,740 --> 00:03:35,409
second element, which is index of 1. The

68
00:03:35,409 --> 00:03:37,449
plus here at the beginning converts the

69
00:03:37,449 --> 00:03:40,400
URL path string to a number. If the

70
00:03:40,400 --> 00:03:43,430
resulting value is not a number, or less

71
00:03:43,430 --> 00:03:46,349
than 1, we display an alert, direct the

72
00:03:46,349 --> 00:03:48,960
user to the Product List page, and return

73
00:03:48,960 --> 00:03:51,979
false to abort the current operation.

74
00:03:51,979 --> 00:03:54,289
Notice that this code is the same code we

75
00:03:54,289 --> 00:03:56,879
used to activate our route with code that

76
00:03:56,879 --> 00:03:59,560
we saw in the last clip. And here we

77
00:03:59,560 --> 00:04:02,340
return true to continue activating the

78
00:04:02,340 --> 00:04:05,069
route. Now, we don't normally want to

79
00:04:05,069 --> 00:04:08,349
display an alert from our application. In

80
00:04:08,349 --> 00:04:10,960
a real application, we'd route to an error

81
00:04:10,960 --> 00:04:12,919
page that would notify the user of the

82
00:04:12,919 --> 00:04:15,289
problem and optionally provide a button

83
00:04:15,289 --> 00:04:17,360
for navigating back to the Product List

84
00:04:17,360 --> 00:04:19,720
page. But this is good enough for our

85
00:04:19,720 --> 00:04:23,000
purposes. Next, we need to hook up this

86
00:04:23,000 --> 00:04:25,699
guard to the appropriate route. We add the

87
00:04:25,699 --> 00:04:27,639
CanActivate property to the route

88
00:04:27,639 --> 00:04:30,209
definition for the ProductDetailComponent

89
00:04:30,209 --> 00:04:33,199
and set it to an array. In the array, we

90
00:04:33,199 --> 00:04:35,860
specify each guard we want to execute when

91
00:04:35,860 --> 00:04:38,560
activating the ProductDetail route. In

92
00:04:38,560 --> 00:04:41,430
this case, we have only one. That should

93
00:04:41,430 --> 00:04:44,629
do it. Let's give it a try. If we view the

94
00:04:44,629 --> 00:04:47,870
Product List page and select a product,

95
00:04:47,870 --> 00:04:50,370
our URL is valid and we navigate to the

96
00:04:50,370 --> 00:04:54,050
page. If we instead type in a URL that is

97
00:04:54,050 --> 00:04:57,319
not a number, we see our message. The

98
00:04:57,319 --> 00:04:59,220
ProductDetail route navigation is

99
00:04:59,220 --> 00:05:01,550
cancelled and we are redirected to the

100
00:05:01,550 --> 00:05:05,160
Product List page. It works! Use route

101
00:05:05,160 --> 00:05:07,769
guards any time you want to prevent access

102
00:05:07,769 --> 00:05:10,660
to a route, confirm navigation away from a

103
00:05:10,660 --> 00:05:14,680
route, or preload data for a route. So

104
00:05:14,680 --> 00:05:21,000
let's finish up this module with some checklists.

